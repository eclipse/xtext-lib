pipeline {
	agent any

	options {
		buildDiscarder(logRotator(numToKeepStr:'15'))
	}

	tools { 
		maven 'apache-maven-latest'
		jdk 'oracle-jdk8-latest'
	}
	
	// see https://github.com/jenkinsci/ghprb-plugin/blob/master/README.md#job-dsl-support
	triggers {
		githubPullRequest {
			cron('H/2 * * * *')
			useGitHubHooks()
			permitAll()
			// autoCloseFailedPullRequests()
			//whiteListTargetBranches(['master'])
			//blackListTargetBranches([])
			extensions {
				buildStatus {
					completedStatus('SUCCESS', 'There were no errors, go have a cup of coffee...')
					completedStatus('FAILURE', 'There were errors, for info, please see the build logs')
					completedStatus('ERROR', 'There was an error in the infrastructure, please contact report the issue to https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Community , component CI-Jenkins')
				}
			}
		}
	}
	
	stages {
		stage('Checkout') {
			steps {
				checkout scm
			}
		}

		stage('Gradle Build') {
			steps {
				sh "./gradlew clean cleanGenerateXtext build createLocalMavenRepo -PcompileXtend=true -PJENKINS_URL=$JENKINS_URL -PignoreTestFailures=true --refresh-dependencies --continue"
				step([$class: 'JUnitResultArchiver', testResults: '**/build/test-results/test/*.xml'])
			}
		}
		
		stage('Maven Build') {
			steps {
				dir('.m2/repository/org/eclipse/xtext') { deleteDir() }
				dir('.m2/repository/org/eclipse/xtend') { deleteDir() }
				sh "mvn -f releng --batch-mode --update-snapshots -Dmaven.repo.local=.m2/repository -DJENKINS_URL=$JENKINS_URL -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn clean install"
			}
		}
	}

	post {
		success {
			archiveArtifacts artifacts: 'build/**'
		}
	}
}